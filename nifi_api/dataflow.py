# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_dataflow.ipynb (unless otherwise specified).

__all__ = ['DataFlow']

# Cell

import time

from .environment import Vars, NifiIds
from .rest import Flowfiles, Processor

# Cell


class DataFlow:
    """
    Monitors and controls a Nifi dataflow. The process starts
    when the **run** method is called.

    Parameters
   -------------

      dataFlowIds: DataFlowIds
        data structure that contains all the IDs of the in/out
        processors and connections

"""

    def __init__(
        self,
        dataFlowIds: object,
    ) -> None:
        self.in_processor = Processor(dataFlowIds.in_processor)
        self.out_processor = Processor(dataFlowIds.out_processor)
        self.in_flowfiles = Flowfiles(dataFlowIds.in_connection)
        self.out_flowfiles = Flowfiles(dataFlowIds.out_connection)

    def run(self) -> None:

        self.in_flowfiles.get_ids()
        self.out_processor.update_run_status("STOPPED")
        self.in_processor.update_run_status("RUNNING")
        while True:

            self.out_flowfiles.get_ids()

            if self.in_flowfiles.equals(self.out_flowfiles):
                self.in_processor.update_run_status("STOPPED")
                self.out_processor.update_run_status("RUNNING")
                print("Pipeline watching has finished ...")
                break
            time.sleep(Vars.seconds_between_checks)