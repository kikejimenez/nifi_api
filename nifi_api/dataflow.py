# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_dataflow.ipynb (unless otherwise specified).

__all__ = ['DataFlow']

# Cell
from .endpoints import *
from .rest import Flowfile, Processor
from .tools import get_valid_uuids_in_connector

# Cell
class DataFlow:
    """
Parameters
--------
"""

    def __init__(
        self,
        in_connection_id: str,
        out_connection_id: str,
        in_processor_id: str,
        out_processor_id: str,
    ) -> None:
        self.in_connection_id = in_connection_id
        self.out_connection_id = out_connection_id
        self.in_processor = Processor('in_processor_id')
        self.out_processor = Processor('out_processor_id')

    def is_done(self) -> bool:
        return set(self.in_flowfiles) == set(self.out_flowfiles)

    def get_incoming_flowfiles(self) -> None:
        queues = Flowfile.list_queues(self.in_connection_id)
        self.in_flowfiles = get_valid_uuids_in_connector(queues)

    def get_outcoming_flowfiles(self) -> None:
        queues = Flowfile.list_queues(self.out_connection_id)
        self.out_flowfiles = get_valid_uuids_in_connector(queues)

    def lifecycle(self) -> None:

        self.get_incoming_flowfiles()
        self.out_processor.update_run_status("STOPPED")
        self.in_processor.update_run_status("RUNNING")
        while True:

            self.get_outcoming_flowfiles()

            if self.is_done():
                self.in_processor.update_run_status("STOPPED")
                self.out_processor.update_run_status("RUNNING")
                break